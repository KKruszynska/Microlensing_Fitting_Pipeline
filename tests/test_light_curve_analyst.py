import pytest
import numpy as np

from MFPipeline import logs

scenario_gaia = {
        "path_outputs": "tests/test_cmd/output",
        "event_name": "GDR3-ULENS-025",
        "ra": 260.8781,
        "dec": -27.3788,
        "lc_analyst": {
            "n_max" : 5
        },
        "light_curves" : [
                {
                    "survey": "Gaia",
                    "band": "G",
                    "lc" : [[2456910.4676960483, 16.119647097397866, 0.024182109480500265], [2456944.097920084, 16.1281994879945, 0.024102478488337693], [2456944.1719414876, 16.1285359626727, 0.02419777467055903], [2457078.3890062636, 16.120357072333967, 0.02403471865678973], [2457078.463020536, 16.134760710966667, 0.024505304034794853], [2457107.878045984, 16.116736630569648, 0.02424988674596031], [2457107.952060067, 16.115967187433412, 0.024124044205778204], [2457129.1305468855, 16.132024663147845, 0.024318708043387052], [2457267.912960924, 16.098216809354827, 0.023799038017496735], [2457300.391961907, 16.079130401744436, 0.023866983792220856], [2457318.4670760017, 16.07142315914993, 0.023531813749123318], [2457318.643198729, 16.069144840302208, 0.023722670344479765], [2457453.9383531422, 14.99055127279246, 0.015404419381658476], [2457488.670021793, 14.365753774551392, 0.012093605935530037], [2457488.744034871, 14.37452149829206, 0.012726113407297016], [2457502.6764832777, 14.48665896919324, 0.012734657594140235], [2457502.750467077, 14.513437777084865, 0.012868771372960946], [2457502.9266667766, 14.505492127551664, 0.012860206858602782], [2457643.7846181365, 15.890986967584114, 0.022106032161524777], [2457681.5051815296, 16.01045739488919, 0.02319143808075375], [2457681.681346247, 16.011106502385413, 0.023357456047075995], [2457681.755325464, 16.003154676154338, 0.02295600668208681], [2457690.935386812, 16.02487106200895, 0.023130464027282093], [2457691.0093671656, 16.027657718224443, 0.02316789500337163], [2457691.185513397, 16.030648484337213, 0.023164879093566362], [2457691.259516285, 16.027504606626724, 0.023199287644348036], [2457782.0772555578, 16.115588639544, 0.024165096227882318], [2457782.2533991826, 16.1185065357121, 0.02398959735430794], [2457782.327439331, 16.10987710488869, 0.024123913508031773], [2457793.890539446, 16.10602811118399, 0.02394877816643231], [2457794.066712325, 16.108900610438045, 0.024109721829405222], [2457794.140726579, 16.11220545102374, 0.023942914094808997], [2457829.545259242, 16.121608265363125, 0.024085050752152042]],
                },
                {
                    "survey": "Gaia",
                    "band": "BP",
                    "lc": [[2456910.4680109997, 17.731966728974463, 0.2385655986167379], [2456944.098234465, 17.809826248222045, 0.22171800712842799], [2456944.1722349133, 17.72254007920538, 0.31209754575449195], [2457078.389321297, 17.769989911451425, 0.25238182512785773], [2457078.4633350107, 17.843562035094696, 0.24994489502700412], [2457107.878360783, 17.792961439532426, 0.22462151894719967], [2457107.952375094, 17.795132631349112, 0.26903542203493025], [2457267.913275357, 17.749619922520946, 0.2309253025992069], [2457300.3922552997, 17.812130266642708, 0.45824481817470053], [2457318.4673902676, 17.773838369225842, 0.31971731956954247], [2457318.643534822, 17.720804245500922, 0.22697464617680968], [2457453.938667542, 16.679526539375118, 0.11707917179103021], [2457488.6703365473, 16.008466225119655, 0.10481645099308214], [2457488.744349812, 16.05022893706441, 0.0793091922629137], [2457502.6767982924, 16.185477708057693, 0.09998541979907677], [2457502.7508099442, 16.197084519093675, 0.08903691430600141], [2457502.9269811464, 16.00281450771968, 0.07571005465623784], [2457643.7849324504, 17.572832199336744, 0.22249092533233417], [2457681.5054963874, 17.61153923746962, 0.24060264009148763], [2457681.68163965, 17.25286113780618, 0.2670445467777291], [2457681.7556396844, 17.555794794414748, 0.2003086988637216], [2457690.9356802045, 17.760103491304548, 0.3378350272795684], [2457691.009681709, 17.596587187251636, 0.2914181821317246], [2457691.185828424, 17.762201775906338, 0.250530086704737], [2457691.259831408, 17.704714934038503, 0.27122173362036267], [2457782.077570622, 17.7978819574828, 0.2733851202385386], [2457782.2537419554, 17.74040660332473, 0.26677605429884443], [2457782.327753696, 17.78750342251827, 0.24657792229536682], [2457793.8908537743, 17.592326382618012, 0.4843930725449877], [2457794.067027321, 17.82192554339962, 0.23223726974585968], [2457794.141041761, 17.831455174325885, 0.24708007223523026], [2457829.545573648, 17.74216026828207, 0.24717677436909988]],
                },
                {
                    "survey": "Gaia",
                    "band": "RP",
                    "lc": [[2456910.468096635, 14.89890735350567, 0.0625007758134266], [2456944.0983232222, 14.88315079975548, 0.058394080261497144], [2456944.172322946, 14.890607440029145, 0.05986875288561744], [2457078.389406806, 14.888550076304455, 0.06313312087652372], [2457078.4634235767, 14.907205714276405, 0.06012664843504206], [2457107.878447696, 14.874788498007874, 0.05900024267269985], [2457107.952460759, 14.883704639733054, 0.06194419274065489], [2457267.9133636383, 14.853566947067122, 0.057003137019366185], [2457300.3923433195, 14.840071378227243, 0.05884674247087192], [2457318.4674796057, 14.8305878917394, 0.05806961062261091], [2457318.6436198885, 14.840092367840226, 0.06041400535904676], [2457453.938756272, 13.767286960214115, 0.0339206314130224], [2457488.67042345, 13.142662093961096, 0.028921513961562353], [2457488.744436219, 13.140468981512628, 0.02531252575954629], [2457502.6768835555, 13.272681827170546, 0.02950188859770214], [2457502.750897395, 13.277249490994347, 0.026787647300743626], [2457502.92706999, 13.257349737595575, 0.02619391285382488], [2457643.785021562, 14.642966238808913, 0.05180910904322991], [2457681.505582934, 14.772284412415619, 0.06073108244967478], [2457681.681727678, 14.758031995587892, 0.05620880768883758], [2457681.7557291538, 14.769950181428433, 0.05633071036738776], [2457690.9357682965, 14.791068802392127, 0.05746941573524371], [2457691.009769871, 14.784525502384202, 0.061908636585918206], [2457691.1859133975, 14.771696048037649, 0.05915887637770136], [2457691.259916391, 14.773537584123812, 0.06542320058636238], [2457782.077656281, 14.87860307562256, 0.06863374147211153], [2457782.2538294313, 14.883193790975547, 0.06155435304974999], [2457782.32784283, 14.891312684472547, 0.061293227349077634], [2457793.890943061, 14.868231574918378, 0.058722486998822675], [2457794.067112813, 14.877269647060714, 0.06071804297084375], [2457794.141126696, 14.866592483071713, 0.060939771380428914], [2457829.5456623915, 14.88600620110277, 0.0630235885539985]],
                },
                {
                    "survey": "OGLE",
                    "band": "I",
                    "lc": [[2457179.80619, 16.775, 0.005], [2457180.79341, 16.771, 0.005], [2457181.79356, 16.758, 0.005], [2457182.7985, 16.776, 0.005], [2457183.78742, 16.763, 0.005], [2457184.80806, 16.761, 0.005], [2457185.8004, 16.755, 0.005], [2457187.58745, 16.785, 0.005], [2457188.60153, 16.768, 0.005], [2457189.64668, 16.765, 0.005], [2457190.663, 16.778, 0.005], [2457191.79829, 16.79, 0.006], [2457194.6214, 16.762, 0.005], [2457197.66807, 16.775, 0.005], [2457198.74442, 16.775, 0.005], [2457199.76091, 16.771, 0.005], [2457200.75703, 16.773, 0.005], [2457206.76874, 16.777, 0.005], [2457207.74246, 16.774, 0.005], [2457211.55311, 16.774, 0.005], [2457214.53425, 16.786, 0.005], [2457220.61578, 16.775, 0.005], [2457622.54823, 16.449, 0.004], [2457623.69378, 16.433, 0.004], [2457625.63116, 16.444, 0.005], [2457630.61297, 16.475, 0.004], [2457632.59055, 16.473, 0.005], [2457635.58743, 16.495, 0.005], [2457639.50979, 16.507, 0.005], [2457821.88086, 16.765, 0.006], [2457823.83429, 16.77, 0.005], [2457824.90263, 16.758, 0.005], [2457826.82492, 16.756, 0.006], [2457827.88628, 16.765, 0.005], [2457829.8396, 16.766, 0.005], [2457834.80917, 16.782, 0.005], [2457835.76159, 16.766, 0.006], [2457835.90178, 16.769, 0.005], [2457836.8609, 16.771, 0.005], [2457837.81068, 16.76, 0.005], [2457838.75927, 16.78, 0.006], [2457839.76809, 16.777, 0.005], [2457840.78625, 16.775, 0.005], [2457841.81233, 16.772, 0.006], [2457842.80599, 16.753, 0.005], [2457843.80406, 16.768, 0.005], [2457844.81234, 16.771, 0.006], [2457845.80548, 16.769, 0.005], [2457846.80023, 16.767, 0.005], [2457847.77696, 16.785, 0.005], [2457848.76256, 16.755, 0.006], [2457849.75692, 16.762, 0.005], [2457850.73796, 16.784, 0.006], [2457850.92298, 16.768, 0.006], [2457851.9077, 16.764, 0.005], [2457854.75737, 16.756, 0.005], [2457855.74351, 16.763, 0.005], [2457856.7163, 16.782, 0.006], [2457856.9072, 16.783, 0.006], [2457869.68189, 16.777, 0.005], [2457870.73284, 16.763, 0.005], [2457871.77874, 16.77, 0.005], [2457872.849, 16.786, 0.005], [2457873.87548, 16.773, 0.005], [2457874.87893, 16.769, 0.005], [2457876.86671, 16.77, 0.005], [2457877.8684, 16.777, 0.005], [2457879.66876, 16.772, 0.006], [2457880.7345, 16.776, 0.005], [2457881.86243, 16.76, 0.005], [2457882.90042, 16.778, 0.005], [2457893.66752, 16.768, 0.005], [2457893.93431, 16.808, 0.006], [2457894.85835, 16.771, 0.005], [2457901.62822, 16.781, 0.005], [2457902.67771, 16.771, 0.005], [2457903.81869, 16.77, 0.005], [2457904.7467, 16.776, 0.005], [2457905.65886, 16.781, 0.005], [2457906.59218, 16.771, 0.005], [2457906.86512, 16.776, 0.005], [2457908.74088, 16.768, 0.005], [2457909.64991, 16.766, 0.005], [2457910.7234, 16.78, 0.005], [2457916.64521, 16.758, 0.005], [2457916.8783, 16.768, 0.006], [2457917.77539, 16.774, 0.005], [2457922.57071, 16.743, 0.007], [2457923.62424, 16.781, 0.005], [2457924.54629, 16.768, 0.005], [2457924.81182, 16.782, 0.005], [2457925.78429, 16.782, 0.006], [2457926.75136, 16.77, 0.005], [2457933.56403, 16.792, 0.007], [2457934.55593, 16.774, 0.005], [2457934.81776, 16.774, 0.005], [2458189.79912, 16.766, 0.005], [2458190.9021, 16.773, 0.005], [2458192.89675, 16.793, 0.005]],
                },
        ]
}

class testLCAnalyst:
    '''
    Class with tests
    '''
    def __init__(self,
                 scenario):
        self.scenario = scenario

    def test_parse_config(self):
        from MFPipeline.analyst.light_curve_analyst import LightCurveAnalyst

        config = {}
        config["event_name"] = self.scenario.get("event_name")
        path_outputs = self.scenario.get("path_outputs")
        config["ra"], config["dec"] = self.scenario.get("ra"), self.scenario.get("dec")
        config["lc_analyst"] = {}
        dict = self.scenario.get("lc_analyst")
        config["lc_analyst"]["n_max"] = dict.get("n_max")
        config["light_curves"] = self.scenario.get("light_curves")

        light_curves = []
        for entry in config["light_curves"]:
            survey = entry["survey"]
            band = entry["band"]
            if ("path" in entry):
                light_curve = np.genfromtxt(entry["path"], unpack=True)
                light_curves.append((config["event_name"], light_curve, survey, band))
            elif ("lc" in entry):
                light_curve = entry["lc"]
                light_curves.append((config["event_name"], light_curve, survey, band))

        log = logs.start_analyst_log(config["event_name"], path_outputs, 'debug', stream=True)
        analyst = LightCurveAnalyst(config["event_name"], path_outputs, light_curves, log, config_dict=config)
        n_max_config = analyst.config["lc_analyst"]["n_max"]
        logs.close_log(log)

        assert n_max_config == dict.get("n_max")

    def test_run_analyst(self):
        from MFPipeline.analyst.light_curve_analyst import LightCurveAnalyst

        config = {}
        config["event_name"] = self.scenario.get("event_name")
        path_outputs = self.scenario.get("path_outputs")
        config["ra"], config["dec"] = self.scenario.get("ra"), self.scenario.get("dec")
        config["lc_analyst"] = {}
        dict = self.scenario.get("lc_analyst")
        config["lc_analyst"]["n_max"] = dict.get("n_max")
        config["light_curves"] = self.scenario.get("light_curves")

        light_curves = []
        for entry in config["light_curves"]:
            survey = entry["survey"]
            band = entry["band"]
            if ("path" in entry):
                light_curve = np.genfromtxt(entry["path"], unpack=True)
                light_curves.append((config["event_name"], light_curve, survey, band))
            elif ("lc" in entry):
                light_curve = entry["lc"]
                light_curves.append((config["event_name"], light_curve, survey, band))

        log = logs.start_analyst_log(config["event_name"], path_outputs, 'debug')
        analyst = LightCurveAnalyst(config["event_name"], path_outputs, light_curves, log, config_dict=config)
        status = analyst.perform_quality_check()
        logs.close_log(log)

        assert status == True



def test_run():
    case = scenario_gaia
    test = testLCAnalyst(case)
    test.test_parse_config()
    test.test_run_analyst()